#!/usr/bin/python

import math
import sys
import time

b = "59777373021222668798567802133413782890274127408951008331683345339720122013163879481781852674593848286028433137581106040070180511336025315315369547131580038526194150218831127263644386363628622199185841104247623145887820143701071873153011065972442452025467973447978624444986367369085768018787980626750934504101482547056919570684842729787289242525006400060674651940042434098846610282467529145541099887483212980780487291529289272553959088376601234595002785156490486989001949079476624795253075315137318482050376680864528864825100553140541159684922903401852101186028076448661695003394491692419964366860565639600430440581147085634507417621986668549233797848"
s= ""
for i in range(0, 10000):
  s += b
to_skip = int(s[0:7])

assert len(b) * 10000 == len(s)
print("skipping", to_skip)
print("Need ", len(s) - to_skip, "from the end")

output_list = [int(x) for x in s]

# Calculate each output digit
# For digit 1, the base is 0, 1, 0, -1
# For digit 2, it's 0, 0, 1, 1, 0, 0, -1, -1
# for digit 303674, it's 303674x0, 303674x1, 303674x0, 303674x-1
# since we only want 16k after the 303674th digit, the base is always just 1

length = len(output_list)

i = 0
while True:
  i += 1
  sumx = 0
  for out in range(length - 1, to_skip - 1, -1): # each element of output list
    sumx = sumx + output_list[out]
    output_list[out] = sumx % 10
    # array elements before to_skip don't matter
  print(i)
  if i == 100:
    o = "".join([str(x) for x in output_list])
    print("from", to_skip, o[to_skip:to_skip + 8])
    break
